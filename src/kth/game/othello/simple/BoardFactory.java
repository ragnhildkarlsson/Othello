package kth.game.othello.simple;

import java.util.ArrayList;
import java.util.List;

import kth.game.othello.board.Board;
import kth.game.othello.board.Node;

public class BoardFactory {

	private static final int BOARD_SIZE = 8;
	private final String playerWhiteId;
	private final String playerBlackId;

	/**
	 * Create a BoardFactory given the two players playing.
	 * 
	 * @param playerWhiteId
	 *            ID of the player using white marks.
	 * @param playerBlackId
	 *            ID of the player using black marks.
	 */
	protected BoardFactory(String playerWhiteId, String playerBlackId) {
		this.playerWhiteId = playerWhiteId;
		this.playerBlackId = playerBlackId;
	}

	protected SimpleBoard newStartingBoard() {
		List<Node> nodes = new ArrayList<Node>();
		int higherMiddlePosition = BOARD_SIZE / 2;
		int lowerMiddlePosition = higherMiddlePosition - 1;

		for (int y = 0; y < BOARD_SIZE; y++) {
			for (int x = 0; x < BOARD_SIZE; x++) {
				SimpleNode node;
				// If we are in the middle of the board, set nodes to occupied
				if ((y == higherMiddlePosition || y == lowerMiddlePosition)
						&& (x == higherMiddlePosition || x == lowerMiddlePosition)) {
					if (y == x) { // set equally colored nodes diagonally to
									// each other
						node = new SimpleNode(x, y, playerWhiteId);
					} else {
						node = new SimpleNode(x, y, playerBlackId);
					}
				} else {// else the node should be unmarked
					node = new SimpleNode(x, y, null);
				}
				nodes.add(node);
			}
		}
		SimpleBoard board = new SimpleBoard(nodes);
		return board;
	}

	/**
	 * Generate a new board given an old Board, a list of nodes from the old
	 * board to swap, and the player ID to swap the nodes to.
	 * 
	 * @param oldBoard
	 *            The old board to swap nodes on
	 * @param nodesToSwap
	 *            Which nodes on the old board that should be swapped
	 * @param playerIDToSwapTo
	 *            player ID to set for the nodes that will be swapped
	 * @return a board with nodes swapped according to nodesToSwap
	 * @throws IllegalArgumentException
	 *             if the old board size is different from the board size
	 *             generated by this factory
	 */
	protected SimpleBoard newBoardReplacingNodesInBoard(Board oldBoard, List<Node> nodesToSwap, String playerIDToSwapTo)
			throws IllegalArgumentException {
		if (oldBoard.getNodes().size() != BOARD_SIZE * BOARD_SIZE) {
			throw new IllegalArgumentException("Cannot generate a new board based on differently sized old board.");
		}
		List<Node> nodes = new ArrayList<Node>();
		for (int y = 0; y < BOARD_SIZE; y++) {
			for (int x = 0; x < BOARD_SIZE; x++) {
				// See if this node needs to be swapped
				Node newNode;
				Node tempNode = findNodeByCoordinates(nodesToSwap, x, y);
				if (tempNode != null) { // this node should be swapped
					newNode = new SimpleNode(x, y, playerIDToSwapTo);
				} else { // this node should remain the same as in old board
					tempNode = findNodeByCoordinates(oldBoard.getNodes(), x, y);
					newNode = new SimpleNode(x, y, tempNode.getOccupantPlayerId());
				}
				nodes.add(newNode);
			}
		}
		SimpleBoard newBoard = new SimpleBoard(nodes);

		return newBoard;
	}

	private Node findNodeByCoordinates(List<Node> nodesToSearch, int xCoordinate, int yCoordinate) {
		for (Node node : nodesToSearch) {
			if (node.getXCoordinate() == xCoordinate && node.getYCoordinate() == yCoordinate)
				return node;
		}
		return null;
	}
}
